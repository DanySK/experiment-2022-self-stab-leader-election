module multileader:experiment

import protelis:coord:spreading
import protelis:coord:meta:timereplication
import protelis:coord:nonselfstabilizing:accumulation
//import protelis:coord:sparsechoice
import protelis:lang:utils
import protelis:state:time
import multileader:clean
import java.util.Collections.nCopies
import MultiLeaderUtil.shiftAdd
import MultiLeaderUtil.stabilityOf

def degree() = foldSum(nbr(1))
def mid() = self.getDeviceUID().getId()
def random() = rep(x <- self.nextRandomDouble()) { x }

def symmetryBreaker() {
	let mode = env.get("mode")
	if (mode == "cycle") {
		let slot = self.getCurrentTime() % 300
		if (slot < 100) {
			degree()
		} else {
			if (slot < 200) {
				mid()
			} else {
				random()
			}
		}
	} else {
		if (mode == "random") {
			random()
		} else {
			mid()
		}
	}
}

def stability(steps, current) = stabilityOf(
	rep (history <- nCopies(steps, current)) {
		shiftAdd(history, current)
	}
)

def globalLeader(id, symmetry) = if (isSignalStable(symmetry, 1)) { gossip([symmetry, id], max).get(1) } else { id }

def recursiveS(uid, symmetry, grain) {
	let best = globalLeader(uid, symmetry)
	if (distanceTo(best == uid) <= grain) { best } else { recursiveS(uid, symmetry, grain) }
}

// STUFF FROM PT-LANG

def default() = [POSITIVE_INFINITY, POSITIVE_INFINITY]

def breakUsingUids(uid, grain, metric) = share (lead, nbrLead <- uid) {
	distanceCompetition(distanceToWithMetric(uid == lead, metric), nbrLead, uid, grain)
}

def distanceCompetition(d, nbrLead, uid, grain) =
	mux (d > grain) {
		uid
	} else {
		let thr = 0.25 * grain;
		mux (d >= thr) {
			default()
		} else {
			mux (d >= thr) {
				default()
			} else {
				minHood PlusSelf(nbrLead)
			}
		}
	}


def Candidacy(symmetryBreaker, distance, leaderId) = [symmetryBreaker, distance, leaderId]
def candidacySymmetryBreaker(candidacy) = candidacy.get(0)
def candidacyDistance(candidacy) = candidacy.get(1)
def candidacyLeaderId(candidacy) = candidacy.get(2)
def worstCandidacy() = Candidacy(POSITIVE_INFINITY, POSITIVE_INFINITY, POSITIVE_INFINITY)
def fmp(candidacy, localId, radius) =
	mux (candidacyLeaderId(candidacy) == localId || candidacyDistance(candidacy) >= radius) {
		worstCandidacy()
	} else {
		candidacy
	}

def selfstab(mid, radius, symmetryBreaker, metric) {
	let local = Candidacy(-symmetryBreaker, 0, mid)
	candidacyLeaderId(
		rep (candidacy <- local) {
			let candidacies = Candidacy(
				nbr(candidacySymmetryBreaker(candidacy)),
				nbr(candidacyDistance(candidacy)) + metric(),
				nbr(candidacyLeaderId(candidacy))
			)
			let filtered = fmp(candidacies, mid, radius)
			min(local, foldMin(worstCandidacy(), filtered))
		}
	)
}

def selfstabFaster(mid, radius, symmetryBreaker, metric) {
	let local = Candidacy(-symmetryBreaker, 0, mid)
	candidacyLeaderId(
		share (received <- local) {
			let candidacies = received.set(1, received.get(1) + metric())
			let filtered = fmp(candidacies, mid, radius)
			min(local, foldMin(worstCandidacy(), filtered))
		}
	)
}

let symmetry = symmetryBreaker()
let radius = env.get("grain")
let mid = self.getDeviceUID().getId()
let steps = 11
env.put("symmetry", symmetry)

// DISABLED FOR THESE TESTS
// let multileader = multiLeader(mid, symmetry, radius, nbrRange)
// env.put("multileader-stability", stability(steps, multileader))

let recursive = recursiveS(mid, symmetry, radius)
env.put("recursive-stability", stability(steps, recursive))

let classic2 = breakUsingUids([symmetry, mid], radius, nbrRange)
env.put("classic2-stability", stability(steps, classic2))
let classic = broadcast(classic2 == mid, mid)
env.put("classic-stability", stability(steps, classic))

// DISABLED AS SLOW
// let stab = selfstab(mid, radius, symmetry, nbrRange)
// env.put("selfstab-stability", stability(steps, stab))

let withShare = selfstabFaster(mid, radius, symmetry, nbrRange)
env.put("share-stability", stability(steps, withShare))

withShare
